using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using SmartAdmin.Seed.Controllers.Settings;
using SmartAdmin.Seed.Data;
using SmartAdmin.Seed.Models;
using SmartAdmin.Seed.Models.Entities;

namespace SmartAdmin.Seed.Controllers
{
    public class ImportSettingsController : Controller
    {

        #region Declaration

        private readonly ApplicationDbContext _context;
        private List<lkpAllCountries> allcountries;
        private List<lkpAllStates> allstates;
        #endregion
        public ImportSettingsController(ApplicationDbContext context)
        {

            _context = context;
            allstates = (from c in _context.lkpAllStates select c).ToList();
            allcountries = (from c in _context.lkpAllCountries select c).ToList();
        }


        // GET: /<controller>/  
        public IActionResult Index()
        {

            return View();
        }

        [HttpPost]
        public ActionResult UploadFile(IFormFile file)
        {
            List<string> errors = new List<string>(); // added this just to return something

            if (file != null)
            {
                //read all information from csv file and save it to list of type ImportSCVSettings
                List<ImportCSVSettings> lstCSV;
                lstCSV = ReadAsList(file);

                //Process csv to save countries

                var countries = from csv in lstCSV
                                group csv by csv.Country into g
                                select new { Country = g.Key, AllValues = g.ToList() };




                var result = from csv in countries
                             join country in allcountries on csv.Country.ToLower() equals country.CountryName.ToLower()
                           
                             select new
                             {

                                 CountryName = csv.Country
                                 .ToList()
                             };





                foreach (var cntry in countries)
                {


                    var selectedcountry = (from c in allcountries
                                           where c.CountryName == cntry.Country
                                           select c).FirstOrDefault();

                    lkpCountry Country = new lkpCountry();
                    Country.CountryName = selectedcountry.CountryName;
                    Country.Latitude = selectedcountry.latitude;
                    Country.Longitude = selectedcountry.longitude;
                    Country.CreatedAt = DateTime.Now;
                    Country.ModifiedAt = DateTime.Now;
                    Country.Active = true;

                    _context.lkpCountry.Add(Country);
                    _context.SaveChanges();

                }

                foreach (var cntry in countries)
                {

                    var countryvaluesonly = (from c in cntry.AllValues where c.Country == cntry.Country select c).ToList();

                    var countryid = (from c in _context.lkpCountry where c.CountryName == cntry.Country select c).FirstOrDefault();

                    //get all states of selected country
                    ProcessStates(cntry.Country, countryid.CountryId, countryvaluesonly);


                }

               



            }



            return new JsonStringResult(errors.ToString());
        }

        private void ProcessStates(string countryname,int countryid, List<ImportCSVSettings> values)
        {
            var states = from csv in values
                         group csv by csv.State into g
                         select new { State = g.Key, AllValues = g.ToList() };


            foreach (var currentstate in states)
            {

                var selectedstate = (from c in allstates
                                       where c.StateName == currentstate.State && c.CountryCode==countryname
                                       select c).FirstOrDefault();

                lkpState state = new lkpState();
                state.StateName = selectedstate.StateName;
                state.CountryId = countryid;
                state.Latitude = selectedstate.Latitude;
                state.Longitude = selectedstate.Longitude;
                state.CreatedAt = DateTime.Now;
                state.ModifiedAt = DateTime.Now;
                state.Active = true;

                _context.lkpState.Add(state);
                _context.SaveChanges();
            }

            foreach (var state in states)
            {

                var statevaluesonly = (from c in state.AllValues where c.State == state.State select c).ToList();

                var stateid = (from c in _context.lkpState where c.StateName == state.State select c).FirstOrDefault();

                //get all cities of selected state
                ProcessCities(state.State, stateid.StateId, countryname, statevaluesonly);
            }

        }

        private void ProcessCities(string statename, int stateid,string countryname, List<ImportCSVSettings> values)
        {
            var cities = from csv in values
                         group csv by csv.City into g

                         select new { City = g.Key, AllValues = g.ToList() };
            
            foreach (var currentcity in cities)
            {
                var selectedcity = (from c in _context.lkpAllCities
                                    where c.StateName == statename && c.CountryName == countryname && c.CityName==currentcity.City
                                    select c).FirstOrDefault();

                lkpCity city = new lkpCity();
                city.CityName = selectedcity.CityName;
                city.StateId = stateid;
                city.Latitude = selectedcity.Latitude;
                city.Longitude = selectedcity.Longitude;
                city.CreatedAt = DateTime.Now;
                city.ModifiedAt = DateTime.Now;
                city.Active = true;

                _context.lkpCity.Add(city);
                _context.SaveChanges();

            }


            foreach (var city in cities)
            {

                var cityvaluesonly = (from c in city.AllValues where c.City == city.City select c).ToList();

                var cityid = (from c in _context.lkpCity where c.CityName == city.City select c).FirstOrDefault();
                //get all datacenters of selected city
                ProcessDatacenters(city.City, cityid.CityId,cityvaluesonly);
            }

        }

        private void ProcessDatacenters(string cityname,int cityid, List<ImportCSVSettings> values)
        {
            var datacenters = from csv in values
                              group csv by csv.DataCenter into g
                              select new { Datacenter = g.Key, AllValues = g.ToList() };


            foreach (var datacenter in datacenters)
            {

                lkpDataCenter DataCenterValue = new lkpDataCenter();

                DataCenterValue.CityId =cityid;
                DataCenterValue.DataCenterName = datacenter.Datacenter;
                DataCenterValue.CreatedAt = DateTime.Now;
                DataCenterValue.ModifiedAt = DateTime.Now;
                DataCenterValue.Active = true;

                _context.lkpDataCenter.Add(DataCenterValue);
                _context.SaveChanges();
            }


            foreach (var datacenter in datacenters)
            {

                var datacentervaluesonly = (from c in datacenter.AllValues where c.DataCenter == datacenter.Datacenter select c).ToList();

                var datacenterid = (from c in _context.lkpDataCenter where c.DataCenterName == datacenter.Datacenter select c).FirstOrDefault();

                //get all datacenters of selected city
                ProcessDepartment(datacenter.Datacenter, datacenterid.DataCenterId, datacentervaluesonly);
            }

        }

        private void ProcessDepartment(string datacentername,int datacenterid, List<ImportCSVSettings> values)
        {



            foreach (var department in values)
            {

                //insert departments

                lkpDepartment DepartmentValue = new lkpDepartment();

                DepartmentValue.DataCenterId = datacenterid;
                DepartmentValue.DepartmentName = department.Department;
                DepartmentValue.CreatedAt = DateTime.Now;
                DepartmentValue.ModifiedAt = DateTime.Now;
                DepartmentValue.Active = true;

                _context.lkpDepartment.Add(DepartmentValue);
                _context.SaveChanges();
            }

        }


        public List<ImportCSVSettings> ReadAsList(IFormFile file)
        {
            var result = new List<ImportCSVSettings>();
            int i = -1;
            using (var reader = new StreamReader(file.OpenReadStream()))
            {

                while (reader.Peek() >= 0)
                {

                    i = i + 1;
                    string line = reader.ReadLine();
                    if (!String.IsNullOrWhiteSpace(line))
                    {
                        string[] values = line.Split(',');

                        if (i > 0)
                        {
                            ImportCSVSettings csv = new ImportCSVSettings();
                            csv.Country = values[0];
                            csv.State = values[1];
                            csv.City = values[2];
                            csv.DataCenter = values[3];
                            csv.Department = values[4];
                            result.Add(csv);

                        }
                    }


                }


            }
            return result;
        }

    }

    public class ImportCSVSettings
    {
        public string Country { get; set; }
        public string State { get; set; }
        public string City { get; set; }
        public string DataCenter { get; set; }
        public string Department { get; set; }
    }

}
