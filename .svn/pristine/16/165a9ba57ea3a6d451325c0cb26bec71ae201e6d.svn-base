<style type="text/css">
    .page-header p {
        overflow: hidden;
    }

        .page-header p a {
            width: 200px;
            text-align: center;
        }

    .code {
        height: 500px;
        overflow: scroll;
        zoom: .84;
    }

    * {
        font-family: "source-sans-pro";
    }

    .heading {
        font-size: 180px;
        line-height: 200px;
    }

    .head, .examples, .docs {
        text-align: center;
    }

    code, pre, pre span {
        text-align: left;
        font-family: monospace;
        font-weight: normal;
        font-size: medium;
    }

    .head ul {
        list-style-type: none;
    }

    .map {
        position: relative;
        margin: 0 auto;
        width: 1000px;
        height: 500px;
    }

    .tall {
        height: 750px;
        width: 550px;
    }

    .examples h3 {
        margin-bottom: 0;
    }

    .options {
        position: relative;
        overflow: hidden;
        max-height: 21px;
        -webkit-transition: max-height 250ms ease-in;
        transition: max-height 250ms ease-in;
        -moz-transition: max-height 250ms ease-in;
    }

        .options pre {
            margin-top: 10px;
        }

        .options:hover {
            background-color: #DDD;
            cursor: pointer;
        }

        .options pre:hover {
            cursor: default;
        }

    .open {
        max-height: 5000px !important;
    }

    .options:after {
        content: "(Click to toggle code) â†“";
        color: #666;
        float: right;
        position: absolute;
        right: 10px;
        top: 10px;
    }

    #footer {
        padding: 10px 0;
        text-align: center;
    }

    sup.new {
        color: red;
    }

    path {
        stroke: white;
        stroke-width: 0.25px;
        fill: lightblue;
        cursor: pointer;
    }


    div.tooltipdatacenter {
        position: absolute;
        text-align: center;
        width: 190px;
        height: 205px;
        padding: 2px;
        font: 12px sans-serif;
        background: lightblue;
        border: 0px;
        border-radius: 8px;
        pointer-events: none;
    }

    div.tooltip {
        color: black;
        background: #fff;
        border-radius: 3px;
        box-shadow: 0px 0px 2px 0px #a6a6a6;
        padding: .2em;
        text-shadow: #f5f5f5 0 1px 0;
        opacity: 0.9;
        position: absolute;
        font-size: 14px;
        font-family: "Arial", sans-serif;
        font-weight: normal;
    }


    .names {
        fill: none;
        stroke: #fff;
        stroke-linejoin: round;
    }


    /*    text{
      pointer-events:none;
    }*/

    .details {
        color: white;
    }


    .node circle {
        fill: #fff;
        stroke: orange;
        stroke-width: 2px;
        width: 10px;
        height: 10px;
    }

    .node text {
        font: 12px sans-serif;
        font-weight: normal;
    }

    .link {
        fill: none;
        stroke: black;
        stroke-width: 1px;
        stroke-dasharray: 20,10,5,5,5,10;
    }

    .nodedata circle {
        fill: #fff;
        stroke: steelblue;
        stroke-width: 3px;
    }

    .nodedata text {
        font: 12px sans-serif;
    }

    .linkdata {
        fill: none;
        stroke: #ccc;
        stroke-width: 2px;
    }



    /**Application Css starts here*/
    .nodeapp circle {
        fill: #fff;
        stroke: steelblue;
        stroke-width: 3px;
    }

    .nodeapp text {
        font: 12px sans-serif;
    }

    .linkapp {
        fill: none;
        stroke: #ccc;
        stroke-width: 2px;
    }

   /*Starts Datacenterdetails treemap css here*/

    *, *:before, *:after {
        box-sizing: border-box;
    }



    

    #datacentersdetail {
        position: relative;
        width: calc(100% - 0 * 2 * 1px);
        height: calc(100% - 0 * 2 * 1px);
        margin: 0px;
        overflow: hidden;
    }

    .nodenew {
        position: absolute;
        background: transparent url("") no-repeat 50%/cover;
        overflow: hidden;


        opacity: 0.8;
        transition: opacity .8s;
        cursor: pointer;
    }

        .nodenew .label {
            display: inline;
            font-family: sans-serif;
            color: rgba(255, 255, 255, 0.6);
            position: absolute;
            padding: 0;
            margin: 0;
            top: 50%;
            left: 50%;
            -webkit-transform: translateX(-50%) translateY(-50%);
            transform: translateX(-50%) translateY(-50%);
            transition: color .4s, opacity .8s, -webkit-filter .8s;
            transition: color .4s, opacity .8s, filter .8s;
            transition: color .4s, opacity .8s, filter .8s, -webkit-filter .8s;
        }

        .nodenew.hide {
            opacity: 0;
            pointer-events: none;
        }

            .nodenew.hide .label {
                -webkit-filter: blur(10px);
                filter: blur(10px);
            }

        .nodenew:hover .label {
            color: white;
        }

        .nodenew.level-0 {
            z-index: 4;
            font-size: 15vmin;
            display: none;
        }

        .nodenew.level-1 {
            z-index: 3;
            font-size: 10vmin;
        }

        .nodenew.level-2 {
            z-index: 2;
            font-size: 5vmin;
        }

        .nodenew.level-3 {
            z-index: 1;
            font-size: 2.5vmin;
        }

    .d3plus-textBox {
        border: 1px solid red !important;
        padding-bottom: 10px !important;
    }

    #d3plus-textBox-0 text {
        font: 13px Verdana, Helvetica, Arial, sans-serif !important;
        transform: translate(2px, -5px) !important;
        fill:red !important;
    }

   


    /* application css Ends here*/
    /* application css Ends here*/
</style>
<div id="map"></div>

<!-- widget grid -->
<section id="widget-grid" class="">


    <!-- START ROW -->

    <div class="row">



        <!-- NEW COL START -->
        <article class="col-sm-12 col-md-12 col-lg-12">

            <!-- Widget ID (each widget will need unique ID)-->
            <div class="jarviswidget" id="wid-id-1" data-widget-editbutton="false" data-widget-custombutton="false">
                <!-- widget options:
                usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                data-widget-colorbutton="false"
                data-widget-editbutton="false"
                data-widget-togglebutton="false"
                data-widget-deletebutton="false"
                data-widget-fullscreenbutton="false"
                data-widget-custombutton="false"
                data-widget-collapsed="true"
                data-widget-sortable="false"

                -->
                <header>
                    <span class="widget-icon">
                        <i class="fa fa-map-marker"></i>
                    </span>
                    <h2>World Map</h2>

                </header>

                <!-- widget div-->
                <div>

                    <!-- widget edit box -->
                    <div class="jarviswidget-editbox">
                        <!-- This area used as dropdown edit box -->

                    </div>
                    <!-- end widget edit box -->
                    <!-- widget content -->
                    <div class="widget-body no-padding" id="UsmanTesting">


                        <div id="vector-map" class="vector-map">    </div>

                    </div>
                    <!-- end widget content -->

                </div>
                <!-- end widget div -->

            </div>
            <!-- end widget -->
            <!-- Widget ID (each widget will need unique ID)-->
            <div class="jarviswidget jarviswidget-color-darken" id="wid-id-0" data-widget-editbutton="false">
                <!-- widget options:
                usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                data-widget-colorbutton="false"
                data-widget-editbutton="false"
                data-widget-togglebutton="false"
                data-widget-deletebutton="false"
                data-widget-fullscreenbutton="false"
                data-widget-custombutton="false"
                data-widget-collapsed="true"
                data-widget-sortable="false"

                -->
                <header>
                    <span class="widget-icon">
                        <i class="fa fa-table"></i>
                    </span>
                    <h2>Country Wise Data Visualization</h2>

                </header>

                <!-- widget div-->
                <div>

                    <!-- widget edit box -->
                    <div class="jarviswidget-editbox">
                        <!-- This area used as dropdown edit box -->

                    </div>
                    <!-- end widget edit box -->
                    <!-- widget content -->



                    <div class="widget-body no-padding">

                        <div id="mapdetails"></div>




                    </div>
                    <!-- end widget content -->

                </div>
                <!-- end widget div -->

            </div>
            <!-- end widget -->




            <div class="row">
                <div class="col-lg-12">
                    <div class="jarviswidget jarviswidget-color-darken" id="wid-id-0" data-widget-editbutton="false">
                        <!-- widget options:
            usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

            data-widget-colorbutton="false"
            data-widget-editbutton="false"
            data-widget-togglebutton="false"
            data-widget-deletebutton="false"
            data-widget-fullscreenbutton="false"
            data-widget-custombutton="false"
            data-widget-collapsed="true"
            data-widget-sortable="false"

            -->
                        <header>
                            <span class="widget-icon">
                                <i class="fa fa-table"></i>
                            </span>
                            <h2>Department Wise Applications </h2>

                        </header>

                        <!-- widget div-->
                        <div>

                            <!-- widget edit box -->
                            <div class="jarviswidget-editbox">
                                <!-- This area used as dropdown edit box -->

                            </div>


                            <div class="widget-body no-padding">

                                <br />


                              

                                <div id="datacentersdetail"></div>




                            </div>
                            <!-- end widget content -->

                        </div>
                        <!-- end widget div -->

                    </div>

                </div>

            </div>




        </article>
        <!-- END COL -->



    </div>

    <!-- END ROW -->

</section>
<!-- end widget grid -->











@section Scripts {

    <script type="text/javascript">

      




       


       



        var countryjsonobject;


        $.ajax({
            url: '/Home/GetDefinedCountries',
            type: 'POST',
            datatype: 'json',
            async: false,
            error: function (jqXHR, textStatus, errorThrown) {
                alert(errorThrown);

            },
            success: function (result) {
                countryjsonobject = result;

             




            }
        });



        var width = document.getElementById("vector-map").clientWidth,
            height = document.getElementById("vector-map").clientHeight;

        //var width = 1200,
        //    height = 510;
        var countryCode = 826;


        // Some code for the country label tooltip
        var offsetL = document.getElementById('map').offsetLeft + 1;
        var offsetT = document.getElementById('map').offsetTop + 1;

        var tooltip = d3.select("#map")
            .append("div")
            .attr("class", "tooltip hidden");



        




        var projection = d3.geoMercator()
            .center([0, 20])
            .scale(width / 9)
            //.scale(150)
            .translate([width / 2, height / 2])







        var svg = d3.select("#vector-map").append("svg")
            .attr("width", width)
            .attr("height", height);
        var path = d3.geoPath()
            .projection(projection);
        var g = svg.append("g");

        var countryobject = countryjsonobject;


        d3.json("world-110m2.json", function (error, topology) {


            var countries = topojson.feature(topology, topology.objects.countries);

            var selectedcolor;





            g.selectAll(".country")
                .data(topojson.feature(topology, topology.objects.countries)
                    .features)
                .enter().insert("path", ".graticule")
                .attr("class", "country")
                .attr("d", path)
                .on("mousemove", function (d, i) {
                    var mouse = d3.mouse(svg.node())
                        .map(function (d) { return parseInt(d); });
                    tooltip.classed("hidden", false)
                        .attr("style", "left:" + (mouse[0] + offsetL) + "px;top:" + (mouse[1] + offsetT) + "px")
                        .html(ShowCountryName(countryobject, d.id));
                })
                .on("mouseover", function (d, i) {
                    selectedcolor = d3.select(this).attr("r", 10).style("fill");
                    d3.select(this).attr("r", 10).style("fill", "#2874A6");
                })
                .on("mouseout", function () {
                    d3.select(this).attr("r", 10).style("fill", selectedcolor);

                })

                .on('click', function (d, i) {

                    var mouse = d3.mouse(svg.node())
                        .map(function (d) { return parseInt(d); });
                   
                    //var x = document.getElementById("wid-id-1");
                    //x.classList.add("jarviswidget-collapsed");
                    if (d.id == 356) {
                        document.querySelector('.jarviswidget-toggle-btn').click();
                        fillData(d.id);
                    }
                    else {
                        alert('You are not authorized to view this country');
                    }
                    // document.getElementsByClassName('jarviswidget-toggle-btn').click();
                    //document.getElementById("wid-id-1").setAttribute('data-widget-collapsed', 'true');
                    // document.getElementsByTagName("i").class = "fa fa-plus";


                })
                .style("fill", function (d) {

                    if (FoundInCountries(countryobject, d.id)) {


                        return '#2196F3';
                    }
                    else {
                        return 'lightgray';
                    }

                });




            // load and display the cities
            //d3.csv("cities.csv", function (error, data) {
            //    g.selectAll("circle")
            //        .data(data)
            //        .enter()
            //        .append("a")
            //        .attr("xlink:href", function (d) {
            //            return "https://www.google.com/search?q=" + d.city;
            //        }
            //        )
            //        .append("circle")
            //        .attr("cx", function (d) {
            //            return projection([d.lon, d.lat])[0];
            //        })
            //        .attr("cy", function (d) {
            //            return projection([d.lon, d.lat])[1];
            //        })
            //        .attr("r", 3)
            //        .style("fill", "maroon");
            //});


            g.selectAll("path")
                .data(topojson.feature(topology, topology.objects.countries)
                    .features)
                .enter()
                .append("path")
                .attr("d", path)

        });
        // zoom and pan


        var zoom = d3.zoom()
            .on("zoom", function () {

                g.attr("transform", d3.event.transform)

                g.selectAll("circle")
                    .attr("d", path.projection(projection));
                g.selectAll("path")
                    .attr("d", path.projection(projection));
            });



        svg.call(zoom)


        function FoundInCountries(countryobject, id) {


            for (var i = 0; i < countryobject.length; i++) {
                console.log(countryobject[i].id.toString());
                if (countryobject[i].id.toString() == id.toString()) {

                    return true;

                }
            }

            return false;

        }


        function ShowCountryName(countryobject, id) {
            for (var i = 0; i < countryobject.length; i++) {

                if (countryobject[i].id.toString() == id.toString()) {

                    return countryobject[i].name.toString();

                }
            }

            return "";
        }


        /*function FillData Strats here */

        function fillData(countryid) {

            document.getElementById("mapdetails").innerHTML = "";

            var fields = [
                "id",
                "name",
                "tag.analytics.aggname",
                "tag.analytics.jobname",
                "tag.analytics.metric",
                "tag.kubernetes.namespace.creationTimestamp",
                "tag.kubernetes.namespace.name",
                "tag.kubernetes.namespace.phase",
                "tag.kubernetes.namespace.uid",
                "tag.kubernetes.node.ExternalIP",
                "tag.kubernetes.node.Hostname",
                "tag.kubernetes.node.InternalIP",
                "tag.kubernetes.node.creationTimestamp",
                "tag.kubernetes.node.name",
                "tag.kubernetes.node.uid",
                "tag.kubernetes.pod.creationTimestamp",
                "tag.kubernetes.pod.hostIP",
                "tag.kubernetes.pod.label.app",
                "tag.kubernetes.pod.label.chart",
                "tag.kubernetes.pod.label.component",
                "tag.kubernetes.pod.label.controller-revision-hash",
                "tag.kubernetes.pod.label.heritage",
                "tag.kubernetes.pod.label.k8s-app",
                "tag.kubernetes.pod.label.kubernetes.io/cluster-service",
                "tag.kubernetes.pod.label.name",
                "tag.kubernetes.pod.label.pod-template-generation",
                "tag.kubernetes.pod.label.pod-template-hash",
                "tag.kubernetes.pod.label.release",
                "tag.kubernetes.pod.label.tier",
                "tag.kubernetes.pod.name",
                "tag.kubernetes.pod.phase",
                "tag.kubernetes.pod.podIP",
                "tag.kubernetes.pod.uid",
                "tag.kubernetes.service",
                "tag.kubernetes.type",
                "tag.collector",
                "units"
            ]

            var key = "tag.kubernetes.pod.label.release";

            const buildTree = (fields) => {
                let tree = {
                    "name": "tags",
                    "children": []
                }

                const addNodes = (tag) => {
                    for (let i = 0; i < root.children.length; i++) {
                        if (tag === root.children[i].name) {
                            root = root.children[i];
                            return;
                        }
                    }
                    root.children.push({
                        'name': tag,
                        children: []
                    })
                    root = root.children[root.children.length - 1]
                }

                fields.forEach((field) => {
                    tags = field.split('.');
                    root = tree;
                    tags.forEach(addNodes)
                })
                return tree;
            }

           var realData;
            



            $.ajax({
                url: '/Home/GetDataCenterTreeForCountry',
                type: 'POST',
                datatype: 'json',
                data: { countryid: countryid },
                async: false,
                error: function (jqXHR, textStatus, errorThrown) {
                    alert(errorThrown);

                },
                success: function (result) {
                    //realData = { "name": "pak" };

                //    realData = {
                //         "name": "Max" ,
                //     "name": "Hagbard" ,
                //     "name": "Karl" 
                //};

                    realData = result;
                   
                 

                }
            });

            

            var tooltipdatacenter = d3.select("body")
                .append("div")
                .attr("class", "tooltipdatacenter")//add the tooltip class
                .style("position", "absolute")
                .style("z-index", "1000")
                .style("visibility", "hidden");


            // Set the dimensions and margins of the diagram
            var margin = { top: 0, right: 0, bottom: 30, left: 70 },
                width = window.innerWidth - margin.left - margin.right,
                height = 700 - margin.top - margin.bottom;

            // append the svg object to the body of the page
            // appends a 'group' element to 'svg'
            // moves the 'group' element to the top left margin
            var svg = d3.select("#mapdetails").append("svg")
                .attr("id", "svg")
                .attr("width", width + margin.right + margin.left)
                .attr("height", height + margin.top + margin.bottom)
                // .attr("preserveAspectRatio", "xMinYMin meet")
                //   .attr("viewBox", `0 0 ${width} ${height}`)
                .append("g")
                .attr("transform", "translate("
                    + margin.left + "," + margin.top + ")");



            // declares a tree layout and assigns the size
            var treemap = d3.tree().size([height, width]);
            var i = 0,
                duration = 750,
                root;
            // Assigns parent, children, height, depth
            root = d3.hierarchy(realData, function (d) { return d.children; });
            root.x0 = height / 2;
            root.y0 = 0;

            // Collapse after the second level
            // root.children.forEach(collapse);

            // collapse all
            expand(root)
            expandOnKey(key, root);
            update(root);

            //Expand the tree based on key
            function expandOnKey(key, root) {
                var node = root;
                var tags = key.split(".");
                while (tags.length > 0) {
                    var found = false;
                    var next = tags[0]
                    if (node._children) {
                        node._children.forEach((child) => {
                            if (child.data.name === next) {
                                // expand this node
                                node.children = node._children;
                                node._children = null;
                                // change fill color
                                node.class = 'match'
                                child.class = 'match';
                                node = child;
                                found = true;
                            }
                        })
                    }
                    if (found) {
                        tags.shift()
                    } else {
                        return;
                    }
                }
            }


            // Collapse the node and all it's children
            function collapse(d) {
                if (d.children) {
                    d._children = d.children
                    d._children.forEach(collapse)
                    d.children = null
                }
            }

            function expand(d) {
                var children = (d.children) ? d.children : d._children;
                if (d._children) {
                    d.children = d._children;
                    d._children = null;
                }
                if (children)
                    children.forEach(expand);
            }
            function getHeight(root) {
                if (!root) {
                    return 0
                }
                let expandChildren = [0]
                // if root has expanded children
                if (root.children) {
                    expandChildren = root.children.map(ea => getHeight(ea))
                }
                const max = expandChildren.reduce((a, b) => Math.max(a, b))
                return 1 + max
            }

            function update(source) {
                var currentHeight = getHeight(root);
                var newWidth = window.innerWidth;
                document.getElementById("svg").style.width = newWidth;
                // Assigns the x and y position for the nodes
                var realData = treemap(root);

                // Compute the new tree layout.
                var nodes = realData.descendants(),
                    links = realData.descendants().slice(1);

                // Normalize for current-depth.
                nodes.forEach(function (d) { d.y = d.depth * window.innerWidth / (currentHeight + Math.log(currentHeight - 1)) });
                // ****************** Nodes section ***************************
                // create tip for nodes
                // var tip = d3.tip()
                //   .attr('class', 'd3-tip')
                //   .offset([-10, 0])
                //   .html(function(d) {
                //     return getPath(d)
                //   })

                // Update the nodes...
                var node = svg.selectAll('g.node')
                    .data(nodes, function (d) { return d.id || (d.id = ++i); });



                // Enter any new modes at the parent's previous position.
                var nodeEnter = node.enter().append('g')
                    .attr('class', 'node')
                    .attr("transform", function (d) {
                        return "translate(" + source.y0 + "," + source.x0 + ")";
                    })
                    .on('click', click);
                // nodeEnter.call(tip);
                // Add Circle for the nodes
                nodeEnter.append('circle')
                    .attr('class', 'node')
                    .attr('r', 1e-6)
                    .style("fill", function (d) {
                        return d._children ? "#2196F3" : "#fff";
                    })
                // .on('mouseover', tip.show) // add tip
                // .on('mouseout', tip.hide);

                //////////// adds images as nodes
                //////////nodeEnter.append("image")
                //////////    .attr("xlink:href", function (d) { return d.data.name; })
                //////////    .attr("x", "-12px")
                //////////    .attr("y", "-12px")
                //////////    .attr("width", "24px")
                //////////    .attr("height", "24px");

                // Add labels for the nodes
                nodeEnter.append('text')
                    .attr("dy", ".35em")
                    .attr("x", function (d) {
                        return d.children || d._children ? -13 : 13;
                    })
                    .attr("text-anchor", function (d) {
                        return d.children || d._children ? "end" : "start";
                    })
                    .text(function (d) { return d.data.name; });

                // UPDATE
                var nodeUpdate = nodeEnter.merge(node);
                // Transition to the proper position for the node
                nodeUpdate.transition()
                    .duration(duration)
                    .attr("transform", function (d) {
                        return "translate(" + d.y + "," + d.x + ")";
                    });

                // Update the node attributes and style
                nodeUpdate.select('circle.node')
                    .attr('r', 5)
                    .on("mouseover", function (d) {

                        console.log('ddd');
                        tooltipdatacenter.style("visibility", "visible")
                            .html('<b>Name : mumbai-dc2</b>' + "<br/><hr/><br/>" + ' Coloumn1 : Any column1 value' + "<br/>" + ' Coloumn2 : Any column2 value' + "<br/>" + ' Coloumn3 : Any column3 value' + "<br/><hr/>" + ' Total Departments : 4')

                        //div.transition()
                        //    .duration(200)
                        //    .style("opacity", .9);
                        //div.html(formatTime(d.date) + "<br/>" + d.close)
                        //    .style("left", (d3.event.pageX) + "px")
                        //    .style("top", (d3.event.pageY - 28) + "px");
                    })
                    .on("mouseout", function (d) {
                        return tooltipdatacenter.style("visibility", "hidden");

                    })
                    .on("mousemove", function () {
                        return tooltipdatacenter.style("top", (d3.event.pageY - 140) + "px").style("left", (d3.event.pageX - 200) + "px");
                    }) 
                    .style("fill", function (d) {
                        if (getPath(d) === key) {
                            if (key == "Maharashtra.Mumbai.mumbai-dc1") {
                                // clicked leaf node
                                //document.querySelector('button-icon jarviswidget-toggle-btn').click();
                                filldepartments();
                                return 'blue';
                                applicationDetails();
                            }
                            else {
                                alert('You are not authorized to view this data center');
                            }
                            return 'blue';
                        } else if (d.class === 'match') {
                            return 'green';
                        }
                        return d._children ? "#2196F3" : "#fff";
                    })
                    .style("stroke", function (d) {
                        if (getPath(d) === key) {
                            // clicked leaf node
                            return 'lightblue';
                        } else {
                            return '#2196F3';
                        }

                    })
                    .attr('cursor', 'pointer');


                // Remove any exiting nodes
                var nodeExit = node.exit().transition()
                    .duration(duration)
                    .attr("transform", function (d) {
                        return "translate(" + source.y + "," + source.x + ")";
                    })
                    .remove();

                // On exit reduce the node circles size to 0
                nodeExit.select('circle')
                    .attr('r', 1e-6);

                // On exit reduce the opacity of text labels
                nodeExit.select('text')
                    .style('fill-opacity', 1e-6);

                // ****************** links section ***************************

                // Update the links...
                var link = svg.selectAll('path.link')
                    .data(links, function (d) { return d.id; });

                // Enter any new links at the parent's previous position.
                var linkEnter = link.enter().insert('path', "g")
                    .attr("class", "link")
                    .attr('d', function (d) {
                        var o = { x: source.x0, y: source.y0 }
                        return diagonal(o, o)
                    });

                // UPDATE
                var linkUpdate = linkEnter.merge(link);

                // Transition back to the parent element position
                linkUpdate.transition()
                    .duration(duration)
                    .attr('d', function (d) { return diagonal(d, d.parent) })
                    .style("stroke", function (d) {
                        if (d.class === 'match') {
                            return '#3fb986'
                        }
                    });

                // Remove any exiting links
                var linkExit = link.exit().transition()
                    .duration(duration)
                    .attr('d', function (d) {
                        var o = { x: source.x, y: source.y }
                        return diagonal(o, o)
                    })
                    .remove();

                // Store the old positions for transition.
                nodes.forEach(function (d) {
                    d.x0 = d.x;
                    d.y0 = d.y;
                });

                // Creates a curved (diagonal) path from parent to the child nodes
                function diagonal(s, d) {

                    var path = `M ${s.y} ${s.x}
                    C ${(s.y + d.y) / 2} ${s.x},
                      ${(s.y + d.y) / 2} ${d.x},
                      ${d.y} ${d.x}`

                    return path;
                }

                // Toggle children on click.
                function click(d) {
                    if (!d.children && !d._children) {
                        //leaf node
                        key = getPath(d);
                        d.path = key;
                    }
                    //d.children is expanded children
                    //d._children is collapes children
                    if (d.children) {
                        d._children = d.children;
                        d.children = null;
                    } else {
                        d.children = d._children;
                        d._children = null;
                    }
                    update(d);
                }
                // return the path from root to this node
                function getPath(d) {
                    var path = [];
                    while (d.parent !== null) {
                        path.unshift(d.data.name)
                        d = d.parent
                    }
                    return path.join('.')
                }
            }
            // resize the chart width based on window size
            window.addEventListener('resize', _.debounce(function () {

                update(root)
            }, 200));


        }

            /*Fill Data Functions Ends here */



            /***  Map details multilevel code starts here. ***/




        function filldepartments() {

            /* Data Center Details  Starts Here */

            document.getElementById("datacentersdetail").innerHTML = "";
           
        /*Data Center Details Section Ends Here */

            var authors = [
                {
                    "id_author": "vsj2slIAAAAJ",
                    "name": "Albert-LÃ¡szlÃ³ BarabÃ¡si",
                    "name_reduced": "",
                    "institution": "neu.edu",
                    "description": "Northeastern University, Harvard Medical School",
                    "homepage": "http:\/\/www.barabasilab.com\/",
                    "labels": "[u'network_science', u'statistical_physics', u'biological_physics', u'physics', u'medicine']",
                    "coauthors_quantity": "",
                    "cites": "",
                    "cites_all": 100414,
                    "h_index": 97,
                    "ten_index": 216,
                    "cites_08": 63073,
                    "h_index_08": 82,
                    "ten_index_08": 182,
                    "info_update": "2013-10-05 13:33:35",
                    "crawl_parent": "",
                    "crawl_date": "",
                    "crawl_coauthors_advance": "",
                    "crawl_coauthors_complete": "",
                    "crawl_publications_complete": ""
                }
            ]

            var fields = [
                {

                    "id_field": 1100,
                    "field": "Agricultural and Biological Sciences",
                    "field_color": 1100
                },
                {
                    "id_field": 1200,
                    "field": "Arts and Humanities",
                    "field_color": 1200
                },
                {
                    "id_field": 1300,
                    "field": "Biochemistry, Genetics and Molecular Biology",
                    "field_color": 1300
                },
                {
                    "id_field": 1400,
                    "field": "Business, Management and Accounting",
                    "field_color": 1400
                },
                {
                    "id_field": 1500,
                    "field": "Chemical Engineering",
                    "field_color": 1500
                },
                {
                    "id_field": 1600,
                    "field": "Chemistry",
                    "field_color": 1600
                },
                {
                    "id_field": 1700,
                    "field": "Computer Science",
                    "field_color": 1700
                },
                {
                    "id_field": 1800,
                    "field": "Decision Sciences",
                    "field_color": 1800
                },
                {
                    "id_field": 3500,
                    "field": "Dentistry",
                    "field_color": 3500
                },
                {
                    "id_field": 1900,
                    "field": "Earth and Planetary Sciences",
                    "field_color": 1900
                },
                {
                    "id_field": 2000,
                    "field": "Economics, Econometrics and Finance",
                    "field_color": 2000
                },
                {
                    "id_field": 2100,
                    "field": "Energy",
                    "field_color": 2100
                },
                {
                    "id_field": 2200,
                    "field": "Engineering",
                    "field_color": 2200
                },
                {
                    "id_field": 2300,
                    "field": "Environmental Science",
                    "field_color": 2300
                },
                {
                    "id_field": 3600,
                    "field": "Health Professions",
                    "field_color": 3600
                },
                {
                    "id_field": 2400,
                    "field": "Immunology and Microbiology",
                    "field_color": 2400
                },
                {
                    "id_field": 2500,
                    "field": "Materials Science",
                    "field_color": 2500
                },
                {
                    "id_field": 2600,
                    "field": "Mathematics",
                    "field_color": 2600
                },
                {
                    "id_field": 2700,
                    "field": "Medicine",
                    "field_color": 2700
                },
                {
                    "id_field": 1000,
                    "field": "Multidisciplinary",
                    "field_color": 1000
                },
                {
                    "id_field": 2800,
                    "field": "Neuroscience",
                    "field_color": 2800
                },
                {
                    "id_field": 2900,
                    "field": "Nursing",
                    "field_color": 2900
                },
                {
                    "id_field": 3000,
                    "field": "Pharmacology, Toxicology and Pharmaceutics",
                    "field_color": 3000
                },
                {
                    "id_field": 3100,
                    "field": "Physics and Astronomy",
                    "field_color": 3100
                },
                {
                    "id_field": 3200,
                    "field": "Psychology",
                    "field_color": 3200
                },
                {
                    "id_field": 3300,
                    "field": "Social Sciences",
                    "field_color": 3300
                },
                {
                    "id_field": 3400,
                    "field": "Veterinary",
                    "field_color": 3400
                }
            ]

            var categories = [{
                "id_author": "vsj2slIAAAAJ",
                "id_field": "Department1",
                "id_category": "Department1-Application1",
                "category": "Multidisciplinary",
                "field_name_not_used": "Multidisciplinary",
                "publications": 51,
                "intensity": 51.0,
                "color": "lightblue"

            }, {
                "id_author": "vsj2slIAAAAJ",
                "id_field": "Department2",
                "id_category": "Department2-Application1",
                "category": "Agricultural and Biological Sciences (miscellaneous)",
                "field_name_not_used": "Agricultural and Biological Sciences",
                "publications": 2,
                "intensity": 2.0,
                "color": "blue"
            }, {
                "id_author": "vsj2slIAAAAJ",
                "id_field": "Department2",
                "id_category": "Department2-Application2",
                "category": "Ecology, Evolution, Behavior and Systematics",
                "field_name_not_used": "Agricultural and Biological Sciences",
                "publications": 5,
                "intensity": 1.0714285714285712
                ,
                "color": "blue"
            }, {
                "id_author": "vsj2slIAAAAJ",
                "id_field": "Department2",
                "id_category": "Department2-Application3",
                "category": "Biochemistry, Genetics and Molecular Biology (miscellaneous)",
                "field_name_not_used": "Biochemistry, Genetics and Molecular Biology",
                "publications": 6,
                "intensity": 4.166666666666666
                ,
                "color": "blue"
            }, {
                "id_author": "vsj2slIAAAAJ",
                "id_field": "Department3",
                "id_category": "Department3-Application1",
                "category": "Biochemistry",
                "field_name_not_used": "Biochemistry, Genetics and Molecular Biology",
                "publications": 1,
                "intensity": 1.0,
                "color": "red"

            }, {
                "id_author": "vsj2slIAAAAJ",
                "id_field": "Department3",
                "id_category": "Department3-Application2",
                "category": "Biotechnology",
                "field_name_not_used": "Biochemistry, Genetics and Molecular Biology",
                "publications": 4,
                "intensity": 1.8333333333333333,
                "color": "red"
            }, {
                "id_author": "vsj2slIAAAAJ",
                "id_field": "Department3",
                "id_category": "Department3-Application3",
                "category": "Cancer Research",
                "field_name_not_used": "Biochemistry, Genetics and Molecular Biology",
                "publications": 1,
                "intensity": 0.5,
                "color": "red"
            }, {
                "id_author": "vsj2slIAAAAJ",
                "id_field": "Department3",
                "id_category": "Department3-Application4",
                "category": "Cell Biology",
                "field_name_not_used": "Biochemistry, Genetics and Molecular Biology",
                "publications": 3,
                "intensity": 1.3333333333333333,
                "color": "red"
            }, {
                "id_author": "vsj2slIAAAAJ",
                "id_field": "Department4",
                "id_category": "Department4-Application1",
                "category": "Endocrinology",
                "field_name_not_used": "Biochemistry, Genetics and Molecular Biology",
                "publications": 1,
                "intensity": 1.0,
                "color": "steelblue"
            }, {
                "id_author": "vsj2slIAAAAJ",
                "id_field": "Department4",
                "id_category": "Department4-Application2",
                "category": "Genetics",
                "field_name_not_used": "Biochemistry, Genetics and Molecular Biology",
                "publications": 11,
                "intensity": 6.571428571428573,
                "color": "steelblue"
            }]

            var attrs = {
                "id_author": authors,
                "id_field": fields,
                "id_category": categories
            }


            new d3plus.Treemap()
                .select("#datacentersdetail")
                .data(categories)
                .sum("intensity")
                .height(500)
                .shapeConfig({
                    fill: function (d) {
                        return d.color;
                    }
                })
                .groupBy(["id_author", "id_field", "id_category"])
                .depth(1)
                .render()


        }



        /**Application Wise deails Data visualization**/

        function applicationDetails() {
        var appData =
        {
            "name": "Top Level",
            "children": [
                {
                    "name": "Level 2: A",
                    "children": [
                        { "name": "Son of A" },
                        { "name": "Daughter of A" }
                    ]
                },
                { "name": "Level 2: B" }
            ]
        };

        // Set the dimensions and margins of the diagram
        var margin = { top: 20, right: 90, bottom: 30, left: 90 },
            width = document.getElementById("applicationdetails").clientWidth - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

        alert(JSON.stringify(appData));

        // append the svg object to the body of the page
        // appends a 'group' element to 'svg'
        // moves the 'group' element to the top left margin
        var svg = d3.select("#applicationdetails").append("svg")
            .attr("width", width + margin.right + margin.left)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate("
                + margin.left + "," + margin.top + ")");

        var i = 0,
            duration = 750,
            root;

        // declares a tree layout and assigns the size
        var treemap = d3.tree().size([height, width]);

        // Assigns parent, children, height, depth
        root = d3.hierarchy(appData, function (d) { return d.children; });
        root.x0 = height / 2;
        root.y0 = 0;

        // Collapse after the second level
        root.children.forEach(collapse);

        update(root);

        // Collapse the node and all it's children
        function collapse(d) {
            if (d.children) {
                d._children = d.children
                d._children.forEach(collapse)
                d.children = null
            }
        }

        function update(source) {

            // Assigns the x and y position for the nodes
            var appData = treemap(root);

            // Compute the new tree layout.
            var nodes = appData.descendants(),
                links = appData.descendants().slice(1);

            // Normalize for fixed-depth.
            nodes.forEach(function (d) { d.y = d.depth * 180 });

            // ****************** Nodes section ***************************

            // Update the nodes...
            var node = svg.selectAll('g.nodeapp')
                .data(nodes, function (d) { return d.id || (d.id = ++i); });

            // Enter any new modes at the parent's previous position.
            var nodeEnter = node.enter().append('g')
                .attr('class', 'nodeapp')
                .attr("transform", function (d) {
                    return "translate(" + source.y0 + "," + source.x0 + ")";
                })
                .on('click', click);

            // Add Circle for the nodes
            nodeEnter.append('circle')
                .attr('class', 'nodeapp')
                .attr('r', 1e-6)                
                .style("fill", function (d) {
                    return d._children ? "lightsteelblue" : "#fff";
                });

            // Add labels for the nodes
            nodeEnter.append('text')
                .attr("dy", ".35em")
                .attr("x", function (d) {
                    return d.children || d._children ? -13 : 13;
                })
                .attr("text-anchor", function (d) {
                    return d.children || d._children ? "end" : "start";
                })
                .text(function (d) { return d.data.name; });

            // UPDATE
            var nodeUpdate = nodeEnter.merge(node);

            // Transition to the proper position for the node
            nodeUpdate.transition()
                .duration(duration)
                .attr("transform", function (d) {
                    return "translate(" + d.y + "," + d.x + ")";
                });

            // Update the node attributes and style
            nodeUpdate.select('circle.nodeapp')
                .attr('r', 10)
                .style("fill", function (d) {
                    return d._children ? "lightsteelblue" : "#fff";
                })
                .attr('cursor', 'pointer');


            // Remove any exiting nodes
            var nodeExit = node.exit().transition()
                .duration(duration)
                .attr("transform", function (d) {
                    return "translate(" + source.y + "," + source.x + ")";
                })
                .remove();

            // On exit reduce the node circles size to 0
            nodeExit.select('circle')
                .attr('r', 1e-6);

            // On exit reduce the opacity of text labels
            nodeExit.select('text')
                .style('fill-opacity', 1e-6);

            // ****************** links section ***************************

            // Update the links...
            var link = svg.selectAll('path.linkapp')
                .data(links, function (d) { return d.id; });

            // Enter any new links at the parent's previous position.
            var linkEnter = link.enter().insert('path', "g")
                .attr("class", "linkapp")
                .attr('d', function (d) {
                    var o = { x: source.x0, y: source.y0 }
                    return diagonal(o, o)
                });

            // UPDATE
            var linkUpdate = linkEnter.merge(link);

            // Transition back to the parent element position
            linkUpdate.transition()
                .duration(duration)
                .attr('d', function (d) { return diagonal(d, d.parent) });

            // Remove any exiting links
            var linkExit = link.exit().transition()
                .duration(duration)
                .attr('d', function (d) {
                    var o = { x: source.x, y: source.y }
                    return diagonal(o, o)
                })
                .remove();

            // Store the old positions for transition.
            nodes.forEach(function (d) {
                d.x0 = d.x;
                d.y0 = d.y;
            });

            // Creates a curved (diagonal) path from parent to the child nodes
            function diagonal(s, d) {

                path = `M ${s.y} ${s.x}
            C ${(s.y + d.y) / 2} ${s.x},
              ${(s.y + d.y) / 2} ${d.x},
              ${d.y} ${d.x}`

                return path
            }

            // Toggle children on click.
            function click(d) {
                if (d.children) {
                    d._children = d.children;
                    d.children = null;
                } else {
                    d.children = d._children;
                    d._children = null;
                }
                update(d);
            }
        }



        }

       /*** Application Ends here ***/
      
    </script>






}
