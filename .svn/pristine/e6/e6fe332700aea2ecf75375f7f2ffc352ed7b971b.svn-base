using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using SmartAdmin.Seed.Data;
using SmartAdmin.Seed.Models.Entities;

namespace SmartAdmin.Seed.Controllers.Settings
{
    public class CityController : Controller
    {
        #region Declaration
        private readonly ApplicationDbContext _context;
        private List<lkpAllStates> allStates;
        private List<lkpCountry> countries;
        private List<lkpAllCountries> allcountries;
        private List<lkpAllCities> allcities;
        private List<lkpState> states;
        private List<lkpCity> city;
        #endregion
        public CityController(ApplicationDbContext context)
        {
           _context =context;
            allStates = (from c in _context.lkpAllStates select c).ToList();
            countries = (from c in _context.lkpCountry select c).ToList();
            allcities = (from c in _context.lkpAllCities select c).ToList();
            city = (from c in _context.lkpCity select c).ToList();
            states = (from c in _context.lkpState select c).ToList();
            allcountries = (from c in _context.lkpAllCountries select c).ToList();
        }
        public IActionResult Index()
        {
            return View();
        }

        [HttpPost]
        public JsonStringResult GetStateName(int CountryId)
        {
            var result = (from s in _context.lkpState                         
                           where s.CountryId == CountryId
                          select s
                          ).ToList();


            var json = JsonConvert.SerializeObject(result);
            return new JsonStringResult(json);
        }

        public JsonStringResult GetCountryName()
        {
           var resultCountries = (from c in countries
                                  select c).ToList();


           var json   = JsonConvert.SerializeObject(resultCountries);
            return new JsonStringResult(json);
        }
        [HttpPost]
        public JsonStringResult GetCityName(string StateName,int countryid)
        {
            var result = (from s in states
                          join ac in allcities on s.StateName equals ac.StateName
                          where s.StateName == StateName && s.CountryId==countryid
                          select ac
                          ).ToList();


            var json = JsonConvert.SerializeObject(result);
            return new JsonStringResult(json);
        }
      

        [HttpPost]
        public ActionResult SaveCity([FromBody]lkpCityForController objCity)
        {

            try
            {
                var selectedcity = (from c in allcities
                                       where c.CityName == objCity.CityName
                                       select c).FirstOrDefault();

                if (selectedcity == null || objCity.StateId == 0 || objCity.StateId == -999)
                {
                    string messageCity = "City information not found";
                    return new JsonStringResult(messageCity);
                }

                var found = (from c in _context.lkpCity where c.CityName == objCity.CityName select c).FirstOrDefault();

                //Country name dows not exist, so add a new country
                if (found == null)
                {
                    lkpCity city = new lkpCity();
                    city.CityName = selectedcity.CityName;
                    city.StateId = objCity.StateId;
                    city.Latitude = selectedcity.Latitude;
                    city.Longitude = selectedcity.Longitude;
                    city.CreatedAt = DateTime.Now;
                    city.ModifiedAt = DateTime.Now;
                    city.Active = true;

                    _context.lkpCity.Add(city);
                    _context.SaveChanges();
                }
                //Country found, Update it
                else
                {

                    found.CityName = objCity.CityName;
                    found.Latitude = selectedcity.Latitude;
                    found.Longitude = selectedcity.Longitude;
                    found.ModifiedAt = DateTime.Now;
                    _context.SaveChanges();

                }

                string message = "SUCCESS";
                return new JsonStringResult(message);
            }
            catch (Exception ex)
            {

                string message = "Fail.." + ex.Message;
                return new JsonStringResult(message);
            }
            


        }


        [HttpPost]
        public JsonStringResult GetInsertedCities()
        {

            var result = (from cities in _context.lkpCity
                          join state in _context.lkpState on cities.StateId equals state.StateId
                          select new
                          {
                            
                              StateName = state.StateName,
                              CityName=cities.CityName,
                              CityId=cities.CityId,
                              
                          }
                          ).ToList();







            var json = JsonConvert.SerializeObject(result);
            return new JsonStringResult(json);


        }

        [HttpPost]
        public ActionResult DeleteCity([FromBody]lkpCity city)
        {
            string message = "SUCCESS";

            try
            {
                var selectedcity = (from c in _context.lkpCity
                                     where c.CityId == city.CityId
                                     select c).FirstOrDefault();

                if (selectedcity == null)
                {

                    message = "Fail";
                }

                _context.lkpCity.Remove(selectedcity);
                _context.SaveChanges();

                return new JsonStringResult(message);
            }
            catch (System.Exception)
            {

                return new JsonStringResult("Fail");
            }

        }


        private int ParseInt(string value)
        {
            int number = 0;
            if (int.TryParse(value, out number))
                return number;
            else
                return 0;
        }

    }
}
