
@{
    ViewData["Title"] = "Design Report";
}
<style type="text/css">

    /* width */
    ::-webkit-scrollbar {
        width: 5px;
    }

    /* Track */
    ::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    /* Handle */
    ::-webkit-scrollbar-thumb {
        background: #888;
    }

        /* Handle on hover */
        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

    .sidepanel {
        width: 0;
        height: 79vh !important;
        display: none;
        position: absolute;
        z-index: 1;
        border: 1px solid;
        border-color: lightgray;
        top: 0;
        left: 0;
        background-color: #ffffff;
        overflow-x: hidden;
        transition: 0.5s;
        padding-top: 60px;
        margin-left: 23px;
        margin-top: 45px;
        box-shadow: 7px 6px 4px -4px gray;
    }

        .sidepanel a {
            padding: 8px 8px 8px 32px;
            text-decoration: none;
            font-size: 25px;
            color: #818181;
            display: block;
            transition: 0.3s;
        }

            .sidepanel a:hover {
                color: #f1f1f1;
            }

        .sidepanel .closebtn {
            position: absolute;
            top: 0;
            right: 25px;
            font-size: 36px;
        }

    .openbtn {
        font-size: 20px;
        cursor: pointer;
        background-color: #111;
        color: white;
        padding: 10px 15px;
        border: none;
    }

        .openbtn:hover {
            background-color: #444;
        }


    #launchPad {
        /* width: 170px;
        float: left;

        background-color: #f5f5f5;
        border: 1px solid #eaeaea;*/
        height: 50vh !important;
    }

    #dropZone {
        /*float: right;
        border: 1px solid #eaeaea;*/
        width: 95% !important;
        height: 50vh !important;
        /*background-color: #ffffcc;*/
    }

    .card {
        width: 130px;
        padding: 5px 10px;
        margin: 5px;
        border: 1px solid #ccc;
        background-color: #eaeaea;
    }

    .stack {
        display: inline-block;
        vertical-align: top;
        width: 180px;
        border: 1px solid #ccc;
        margin: 20px;
        box-shadow: 0 6px 4px -4px lightgrey;
    }

        .stack:hover {
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
        }

    .stackHdr {
        background-color: #eaeaea;
        border: 1px solid #fff;
        padding: 5px;
    }

    .stackDrop {
        min-height: 100px;
        padding: 15px;
        height: 100% !important;
    }

    .cardRelationship {
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        transition: 0.3s;
        width: 40%;
    }

        .cardRelationship:hover {
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
        }

    .containercardRelationship {
        padding: 2px 16px;
    }

    input.largerCheckbox {
        width: 40px;
        height: 40px;
    }

    input[type="checkbox"]:checked + span {
        background: #c0e8f9;
        color: black;
    }

    /* (A) SEARCH BOX */
    #ulSelectedFilter {
        box-sizing: border-box;
        width: 100%;
        margin-bottom: 15px;
        padding: 10px;
    }

    /* (B) LIST */
    #ulSelectedFields {
        list-style: none;
        margin: 0;
        padding: 0;
    }

        #ulSelectedFields li {
            padding: 10px;
            border-bottom: 2px solid #DCDCDC;
        }

            #ulSelectedFields li:hover {
                background: #eaeaea38;
            }

            #ulSelectedFields li.hide {
                display: none;
            }



    #divgroupcol {
        list-style: none;
        margin: 0;
        padding: 0;
    }

        #divgroupcol li {
            padding: 10px;
            border-bottom: 2px solid #DCDCDC;
        }

            #divgroupcol li:hover {
                background: #eaeaea38;
            }

            #divgroupcol li.hide {
                display: none;
            }



    #divfiltercol {
        list-style: none;
        margin: 0;
        padding: 0;
    }

        #divfiltercol li {
            padding: 10px;
            border-bottom: 2px solid #DCDCDC;
        }

            #divfiltercol li:hover {
                background: #eaeaea38;
            }

            #divfiltercol li.hide {
                display: none;
            }



    #divPreviewTabular:hover {
        background: #eaeaea38;
    }
</style>




<!-- widget grid -->
<section id="widget-grid" class="">


    <!-- START ROW -->

    <div class="row">

        <!-- NEW COL START -->
        <article class="col-sm-12 col-md-12 col-lg-12">



            <div class="jarviswidget" id="wid-id-1" data-widget-editbutton="false" data-widget-custombutton="false">
                <!-- widget options:
                usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                data-widget-colorbutton="false"
                data-widget-editbutton="false"
                data-widget-togglebutton="false"
                data-widget-deletebutton="false"
                data-widget-fullscreenbutton="false"
                data-widget-custombutton="false"
                data-widget-collapsed="true"
                data-widget-sortable="false"

                -->
                <header>
                    <span class="widget-icon">
                        <i class="fa fa-edit"></i>
                    </span>
                    <h2>Configure Report </h2>

                </header>

                <!-- widget div-->
                <div>

                    <!-- widget edit box -->
                    <div class="jarviswidget-editbox">
                        <!-- This area used as dropdown edit box -->

                    </div>
                    <!-- end widget edit box -->
                    <!-- widget content -->
                    <div class="widget-body no-padding">

                        <div class="row">
                            <section class="col col-lg-12">
                                <div id="mySidepanel" class="sidepanel">
                                    <fieldset>
                                        <legend style=" background-color: #fafafa; color: black; padding: 10px; ">
                                            Report Settings <button type="button" class="btn btn-danger" onclick="RefreshReportData()" style="float: right;">&#10004; Update</button>
                                        </legend>

                                    </fieldset>
                                    <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">Ã—</a>

                                    <div class="row">
                                        <div class="col-lg-3">
                                            <div class="stack" style="margin-top:-18px;height:62vh;margin-left:2px;">
                                                <div class="stackHdr">
                                                    <p style="color: dimgrey">
                                                        <b>Choose Datasource</b>
                                                    </p>
                                                </div>
                                                <div id="launchPad">
                                                    @*<div class="card draggable">
                                                            apple
                                                        </div>
                                                        <div class="card draggable">
                                                            orange
                                                        </div>
                                                        <div class="card draggable">
                                                            banana
                                                        </div>
                                                        <div class="card draggable">
                                                            car
                                                        </div>
                                                        <div class="card draggable">
                                                            bus
                                                        </div>*@
                                                </div>
                                            </div>

                                        </div>
                                        <div class="col-lg-3">
                                            <div id="dropZone">
                                                <div class="stack" style="margin-top:-18px;height:62vh;margin-left:2px;">
                                                    <div class="stackHdr">
                                                        <p style="color: dimgrey">
                                                            <b>Selected Datasource</b>
                                                        </p>
                                                    </div>
                                                    <div id="divSelectedDatasource" class="stackDrop droppable">

                                                    </div>
                                                </div>

                                            </div>
                                        </div>

                                        <div class="col-lg-3">
                                            <div class="stack" style="margin-top:-18px;height:62vh;margin-left:2px;width:80%">
                                                <div class="stackHdr" style="background-color: #57889c;">
                                                    <p style="color:white">
                                                        <b>Fields to Use</b>
                                                    </p>

                                                </div>

                                                <div id="chkAllFields" style="height:57vh;overflow:auto">
                                                </div>


                                            </div>
                                        </div>
                                        <div class="col-lg-3">
                                            <fieldset id="fldsetRelationships" style="display:none">
                                                <legend style=" background-color: #fafafa; color: black; padding: 10px; ">Related Datasources</legend>

                                            </fieldset>
                                            <div id="mainrelationships">



                                            </div>
                                        </div>
                                    </div>



                                </div>

                                <button class="btn btn-info" style="margin-left:10px;margin-top:10px;" onclick="openNav()">â˜° Configure Datasource</button>


                                <div class="row" style="margin-left: 10px; margin-right: 10px; margin-top: 10px;">
                                    <fieldset>
                                        <legend style=" background-color: #fafafa; color: black; padding: 10px; ">
                                            Select Report Type:
                                        </legend>

                                    </fieldset>



                                    <div class="col-lg-4">
                                        <input type="radio" id="rdoTabular" name="reporttype" value="Tabular"
                                               checked>
                                        <label for="huey">Tabular</label>
                                    </div>

                                    <div class="col-lg-4">
                                        <input type="radio" id="radoTabularGraphic" name="reporttype" value="Tabular_Graphic">
                                        <label for="dewey">Tabular/Graphic</label>
                                    </div>

                                    <div class="col-lg-4">
                                        <input type="radio" id="rdoPivot" name="reporttype" value="Pivot">
                                        <label for="louie">Pivot</label>
                                    </div>
                                </div>
                            </section>

                        </div>
                    </div>
                    <!-- end widget content -->
                </div>
                <!-- end widget div -->
            </div>

        </article>
        <!-- END COL -->
    </div>


    <div class="row">

        <!-- NEW COL START -->
        <article class="col-sm-12 col-md-12 col-lg-12">



            <div class="jarviswidget" id="wid-id-2" data-widget-editbutton="false" data-widget-custombutton="false">
                <!-- widget options:
                usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                data-widget-colorbutton="false"
                data-widget-editbutton="false"
                data-widget-togglebutton="false"
                data-widget-deletebutton="false"
                data-widget-fullscreenbutton="false"
                data-widget-custombutton="false"
                data-widget-collapsed="true"
                data-widget-sortable="false"

                -->
                <header>
                    <span class="widget-icon">
                        <i class="fa fa-edit"></i>
                    </span>
                    <h2>Design Report </h2>

                </header>

                <!-- widget div-->
                <div>

                    <!-- widget edit box -->
                    <div class="jarviswidget-editbox">
                        <!-- This area used as dropdown edit box -->

                    </div>
                    <!-- end widget edit box -->
                    <!-- widget content -->
                    <div class="widget-body no-padding">

                        <div class="row">
                            <section class="col col-lg-12">



                                <div class="row">
                                    <div class="col-lg-3">
                                        <div class="stack" style="margin-top: .3%;height:70vh;margin-left: 1%;width:100%;margin-top: 2%;">
                                            <div class="stackHdr" style="background-color: #eaeaea38 ">
                                                <p style="color: dimgrey">
                                                    <b>Available Fields</b>
                                                </p>
                                            </div>
                                            <div style="height: 64vh;overflow: auto;">
                                                <!-- (A) SEARCH BOX -->
                                                <input type="text" id="ulSelectedFilter" placeholder="Search For..." />

                                                <!-- (B) LIST OF ITEMS -->
                                                <ul id="ulSelectedFields" style="width:100%;height:50vh;">
                                                </ul>
                                            </div>
                                        </div>

                                    </div>


                                    <div class="col-lg-9">

                                        <div class="row">

                                            <div class="stack col-lg-3" style="margin-top: .2%;width:30%">
                                                <div class="stackHdr" style="background-color: #eaeaea38 ">
                                                    <p style="color: dimgrey">
                                                        <b>Group BY</b>
                                                    </p>
                                                </div>
                                                <div style="height: 24vh;overflow: auto;">


                                                    <!-- (B) LIST OF ITEMS -->
                                                    <ul id="divgroupcol" style="width:100%;height:50vh;">
                                                    </ul>
                                                </div>
                                            </div>

                                            <div class="stack col-lg-3" style="margin-top: .2%;width:30%">
                                                <div class="stackHdr" style="background-color: #eaeaea38 ">
                                                    <p style="color: dimgrey">
                                                        <b>Filter BY</b>
                                                    </p>
                                                </div>
                                                <div style="height: 24vh;overflow: auto;">


                                                    <!-- (B) LIST OF ITEMS -->
                                                    <ul id="divfiltercol" style="width:100%;height:50vh;">
                                                    </ul>
                                                </div>
                                            </div>

                                            <div class="col-lg-3" style="margin-top:60px;">

                                                <button type="button" class="btn btn-primary" onclick="GeneratePreview()">Refresh Preview</button>

                                                <button type="button" class="btn btn-danger" onclick="ClearPreview()">Clear</button>



                                            </div>


                                            <div class="col-lg-3"></div>





                                        </div>

                                        <div id="divPreviewTabular" class="row" style="height: 40vh; border: 1px solid #dddddd; width: 99%; box-shadow: 0 6px 4px -4px lightgrey;">
                                            <br/>

                                              <table id="tblPreview" class="table table-striped table-bordered table-hover" width="100%">
                                
                            </table>


                                        </div>
                                    </div>

                                </div>






                            </section>








                        </div>
                    </div>
                    <!-- end widget content -->
                </div>
                <!-- end widget div -->
            </div>

        </article>
        <!-- END COL -->
    </div>






    <section class="col col-lg-12">
    </section>



    <!-- END ROW -->
</section>
<!-- end widget grid -->
@section Scripts{

    <script type="text/javascript">

        var AllRelationships = [];
        var SelectedRelationships = [];

        var allRelationships = "";

        var allTableNames = [];
        $(document).ready(function () {
            filltables();
            fillRelationships();







            $("#divgroupcol").droppable({
                tolerance: "intersect",
                accept: ".filter",

                drop: function (event, ui) {

                    $(ui.draggable).removeClass('filter');
                    $(ui.draggable).removeClass("filtercol");


                    $(ui.draggable).addClass('filterGroup');

                    $(".filterGroup").draggable({
                        appendTo: "#ulSelectedFields",
                        cursor: "move",
                        helper: 'clone',
                        revert: "invalid",

                    });
                    $("#divgroupcol").append($(ui.draggable));





                }
            });



            $("#ulSelectedFields").droppable({
                tolerance: "intersect",
                accept: ".filterGroup,.filterColumn",

                drop: function (event, ui) {

                    $(ui.draggable).removeClass('filterGroup');
                    $(ui.draggable).removeClass('filterColumn');



                    $(ui.draggable).addClass('filter');
                    $(ui.draggable).addClass("filtercol");

                    $(".filter").draggable({
                        appendTo: "#divgroupcol",
                        cursor: "move",
                        helper: 'clone',
                        revert: "invalid",

                    });
                    $("#ulSelectedFields").append($(ui.draggable));





                }
            });


            $("#divfiltercol").droppable({
                tolerance: "intersect",
                accept: ".filtercol",

                drop: function (event, ui) {


                    $(ui.draggable).removeClass('filter');
                    $(ui.draggable).removeClass("filtercol");




                    $(ui.draggable).addClass('filterColumn');




                    $(".filterColumn").draggable({
                        appendTo: "#divgroupcol",
                        cursor: "move",
                        helper: 'clone',
                        revert: "invalid",

                    });
                    $("#divfiltercol").append($(ui.draggable));





                }
            });




        });


        //$("#launchPad").height($(window).height() - 20);
        // var dropSpace = $(window).width() - $("#launchPad").width();
        //$("#dropZone").width(dropSpace - 70);
        //$("#dropZone").height($("#launchPad").height());



        function filltables() {
            $.ajax({
                url: rootUrl + '/Reports/GetALLMappedTables',
                type: 'POST',
                datatype: 'json',
                error: function (jqXHR, textStatus, errorThrown) {
                    alert(errorThrown);

                },

                success: function (result) {

                    if (result.hasOwnProperty('Message')) {

                    }

                    else {

                        for (var x = 0; x < result.length; x++) {

                            SelectedRelationships.push(result[x].SqlTableName);
                            let newelement = ' <div id="' + result[x].SqlTableName + '" class="card draggable">' + result[x].MappedTableName + '</div>';

                            var obj = {};
                            obj["sqlname"] = result[x].SqlTableName;
                            obj["mappedname"] = result[x].MappedTableName;
                            allTableNames.push(obj);


                            $("#launchPad").append(newelement);

                        }


                        $(".card").draggable({
                            appendTo: "#launchPad",
                            cursor: "move",
                            helper: 'clone',
                            revert: "invalid",

                        });

                        $("#launchPad").droppable({
                            tolerance: "intersect",
                            accept: ".card",

                            drop: function (event, ui) {

                                $("#launchPad").append($(ui.draggable));

                                allRelationships = "";
                                document.getElementById("mainrelationships").innerHTML = '';
                                document.getElementById("fldsetRelationships").style.display = "none";

                                removeTable(ui.draggable.prop('id'));

                            }
                        });

                        $(".stackDrop").droppable({
                            tolerance: "intersect",
                            accept: ".card",

                            drop: function (event, ui) {

                                if (CheckExisting(ui.draggable.prop('id')) == false)
                                    return;

                                $(this).append($(ui.draggable));

                                allRelationships = "";
                                document.getElementById("mainrelationships").innerHTML = '';
                                document.getElementById("fldsetRelationships").style.display = "none";
                                GetALLRelationships(ui.draggable.prop('id'));
                                GetColumns(ui.draggable.prop('id'));


                            }
                        });
                    }




                }


            });
        }

        function GetColumns(tablename) {


            $.ajax({
                url: rootUrl + '/Reports/GetColumnNamesOfTable',
                type: 'POST',
                datatype: 'json',
                data: { tablename: tablename },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert(errorThrown);

                },

                success: function (result) {





                    for (var x = 0; x < result.length; x++) {

                        var newelement = ' <label class = "' + tablename + '"> <input type = "checkbox" checked  style = "margin-left: 20px;"  value = "' + tablename + ':' + result[x].SqlColumnName + '" /> <span><b>' + getMappedName(tablename) + '</b>:' + result[x].MappedColumnName + '</span></label> <br class = "' + tablename + '">';

                        //var newelement = '<input type="checkbox" class="largerCheckbox"  style="margin-left: 20px;" id="id1" value="PHP"/> <label style="margin-left: 20px;">PHP</label> <br>';

                        $("#chkAllFields").append(newelement);

                        // addRow(result[x].SqlColumnName, result[x].ColumnType, result[x].MappedColumnName);
                    }

                    if (result.length > 0) {

                        $("#chkAllFields").append('<hr class = "' + tablename + '" />');
                    }


                }








            });






        }

        function CheckExisting(tablename) {

            var items = document.getElementsByClassName(tablename);

            if (items.length > 0) {
                return false;
            }
            else {
                return true;
            }
        }

        function GetALLRelationships(id) {




            var found = AllRelationships.filter(function (item) { return item.table_name === id.toString() });


            if (found.length > 0) {
                document.getElementById("fldsetRelationships").style.display = "block";


                for (let i = 0; i < found.length; i++) {

                    var foundInSelectedTables = SelectedRelationships.filter(function (item) { return item === found[i].referenced_object.toString() });

                    if (foundInSelectedTables.length > 0) {
                        var html = '<div class="cardRelationship" style="float:right;margin-bottom: 20px;"> <div class="containercardRelationship">  <h4><b>' + getMappedName(found[i].referenced_object) + '</b></h4> <p></p></div></div >';
                        $("#mainrelationships").append(html);

                        allRelationships = allRelationships + "-" + found[i].referenced_object;


                        GetALLRelationships(found[i].referenced_object);
                    }
                }

            }
            else {
                //document.getElementById("fldsetRelationships").style.display = "none";
            }

        }




        function fillRelationships() {
            $.ajax({
                url: rootUrl + '/Reports/GetALLRelationships',
                type: 'POST',
                datatype: 'json',
                error: function (jqXHR, textStatus, errorThrown) {
                    alert(errorThrown);

                },

                success: function (result) {

                    if (result.hasOwnProperty('Message')) {
                        AllRelationships = result.Message;
                    }

                    else {

                        AllRelationships = result;



                    }




                }


            });
        }


        function removeTable(tablename) {


            var items = document.getElementsByClassName(tablename);
            while (items.length > 0) {
                items[0].parentNode.removeChild(items[0]);
            }


        }

        function getMappedName(sqltablename) {




            var found = allTableNames.filter(function (item) { return item.sqlname === sqltablename.toString() });

            if (found.length > 0) {

                return found[0].mappedname.toString();
            }
            else {
                return sqltablename;
            }
        }
        function openNav() {
            document.getElementById("mySidepanel").style.width = "80%";
            document.getElementById("mySidepanel").style.display = "block";
        }

        function closeNav() {
            document.getElementById("mySidepanel").style.width = "0";
            document.getElementById("mySidepanel").style.display = "none";
        }

        function RefreshReportData() {

            var selectedtables = new Array();

            var generatedrelations = "";

            $("#divSelectedDatasource").children().each(function () {

                selectedtables.push($(this).prop('id'));
                //allSelectedTables = allSelectedTables + $(this).prop('id') + ",";


            });

            if (selectedtables.length == 1) {
                generatedrelations = selectedtables[0];
            }

            else {

                for (let i = 0; i < selectedtables.length; i++) {

                    var filteredtables = selectedtables.filter(function (item) {
                        return item !== selectedtables[i]
                    })

                    generatedrelations = generatedrelations + ";" + GetRelationshipColumnName(filteredtables, selectedtables[i]);
                }
            }

            if (generatedrelations.indexOf("not found") != -1) {

                swal("Error", "Invalid Selected Datasource, One or more tables do not have a joining field !", "error");

                return;
            }


            var selected = new Array();
            var selectedText = new Array();

            $("input[type=checkbox]:checked").each(function () {


                selectedText.push($(this).next().text());

                selected.push(this.value);
            });
            if (selected.length > 0) {

                var ul = document.getElementById("ulSelectedFields");
                $("#ulSelectedFields").empty();
                $("#divfiltercol").empty();
                $("#divgroupcol").empty();


                for (let i = 0; i < selected.length; i++) {

                    var li = document.createElement("li");

                    //Mapped table names with actual Column name

                    const splitmappedtableandcolumn = selectedText[i].split(":");



                    var nextText = splitmappedtableandcolumn[0] + ":" + splitmappedtableandcolumn[1];


                    //Actual table names from sql table

                    const splittableandcolumn = selected[i].split(":");



                    var value = splittableandcolumn[0] + ":" + splittableandcolumn[1];




                    li.appendChild(document.createTextNode(nextText));



                    li.className = "filter";
                    li.setAttribute("value", value);

                    $(li).addClass("filtercol");

                    ul.appendChild(li);


                }



                $(".filter").draggable({
                    appendTo: "#divgroupcol",
                    cursor: "move",
                    helper: 'clone',
                    revert: "invalid",

                });



                $(".filtercol").draggable({
                    appendTo: "#divfiltercol",
                    cursor: "move",
                    helper: 'clone',
                    revert: "invalid",

                });




                var filter = document.getElementById("ulSelectedFilter"), // search box
                    list = document.querySelectorAll("#ulSelectedFields li"); // all list items

                // (B) ATTACH KEY UP LISTENER TO SEARCH BOX
                filter.onkeyup = () => {


                    // (B1) GET CURRENT SEARCH TERM
                    let search = filter.value.toLowerCase();

                    // (B2) LOOP THROUGH LIST ITEMS - ONLY SHOW THOSE THAT MATCH SEARCH
                    for (let i of list) {

                        let item = i.innerHTML.toLowerCase();
                        if (item.indexOf(search) == -1) { i.classList.add("hide"); }
                        else { i.classList.remove("hide"); }
                    }
                };

                closeNav();
            }
            else {

                swal({ html: true, title: '<i>ERROR</i>', text: 'Please select some fields from <b>Fields to Use</b> to be displayed on report !' });


                return;
            }


        }

        function GetRelationshipColumnName(selectedtables, tabletocompare) {


            var found = AllRelationships.filter(function (item) { return item.table_name === tabletocompare.toString() });


            if (found.length > 0) {

                for (let i = 0; i < found.length; i++) {

                    var foundinselectedtables = selectedtables.filter(function (item) { return item === found[i].referenced_object.toString() });

                    if (foundinselectedtables.length > 0) {
                        return found[i].referenced_object.toString();
                    }

                }





                for (let i = 0; i < selectedtables.length; i++) {

                    //check if the current table is a master table
                    var foundifparent = AllRelationships.filter(function (item) { return item.referenced_object === tabletocompare.toString() && item.table_name == selectedtables[i].toString() });

                    if (foundifparent.length > 0) {





                        return foundifparent[0].referenced_object.toString();

                    }

                }







                return "not found";




            }
            else {



                for (let i = 0; i < selectedtables.length; i++) {

                    //check if the current table is a master table
                    var foundifparent = AllRelationships.filter(function (item) { return item.referenced_object === tabletocompare.toString() && item.table_name == selectedtables[i].toString() });

                    if (foundifparent.length > 0) {





                        return foundifparent[0].referenced_object.toString();

                    }

                }




                return "not found";
            }

        }


        function GeneratePreview() {

            var columnstobeused = document.querySelectorAll("#ulSelectedFields li");

            var tablesarray = new Array();

            var tablesarraywithid = new Array();

            var parentid = 0;

            for (let col of columnstobeused) {

                let item = col.innerHTML.toLowerCase();


                if (!tablesarray.includes(col.getAttribute("value").split(":")[0])) {
                    tablesarray.push(col.getAttribute("value").split(":")[0]);



                    tablesarraywithid.push({ _id: parentid, tablename: col.getAttribute("value").split(":")[0] });

                    parentid = parentid + 1;
                }



            }

            var arr = new Array();

            tablespriority = GetMainParentTable(tablesarraywithid, arr);



            var arr_final = [];

            var arr_mappedcolumnfinal = [];

            //console.log( topParent(arr, arr[i]._id));

            hierarhySort(arr, -1, arr_final, arr_mappedcolumnfinal);




            console.log(arr_final);
            console.log(arr_mappedcolumnfinal);


            var generatedrelations = "";

            for (let i = 0; i < tablesarray.length; i++) {

                var filteredtables = tablesarray.filter(function (item) {
                    return item !== tablesarray[i]
                })

                generatedrelations = generatedrelations + GetJoinColumn(filteredtables, tablesarray[i]) + ";";
            }

            generatedrelations = generatedrelations.replace(/;\s*$/, "");

            generatedrelations = generatedrelations.replace(";;", ";");

            console.log(generatedrelations);

            GenerateReportPreview(arr_final.join(","), generatedrelations);


        }


        function GetJoinColumn(selectedtables, tabletocompare) {






            var found = AllRelationships.filter(function (item) { return item.table_name === tabletocompare.toString() });

            var related_columns = "";
            if (found.length > 0) {

                for (let i = 0; i < found.length; i++) {

                    var foundInSelectedTables = SelectedRelationships.filter(function (item) { return item === found[i].referenced_object.toString() });

                    if (foundInSelectedTables.length > 0) {
                        var foundinselectedtables = selectedtables.filter(function (item) { return item === found[i].referenced_object.toString() });

                        if (foundinselectedtables.length > 0) {

                            for (let col = 0; col < foundinselectedtables.length; col++) {
                                debugger;
                                var foundcolumn = AllRelationships.filter(function (item) { return item.table_name === tabletocompare.toString() });

                                if (foundcolumn.length > 0) {

                                    

                                    for (let fnd = 0; fnd < foundcolumn.length; fnd++) {
                                        var foundcolumnInSelectedTables = SelectedRelationships.filter(function (item) { return item === foundcolumn[fnd].referenced_object.toString() });
                                        if (foundcolumnInSelectedTables.length > 0) {

                                            if (related_columns.indexOf("(" + foundcolumn[fnd].table_name + ":" + foundcolumn[fnd].constraint_column_name + "=" + foundcolumn[fnd].referenced_object + ":" + foundcolumn[fnd].referenced_column_name.toString() + ")") ==-1)
                                            related_columns = related_columns + "(" + foundcolumn[fnd].table_name + ":" + foundcolumn[fnd].constraint_column_name + "=" + foundcolumn[fnd].referenced_object + ":" + foundcolumn[fnd].referenced_column_name.toString() + ")" + ",";
                                        }
                                    }

                                }
                            }


                        }
                    }



                }

                related_columns = related_columns.replace(/,\s*$/, "");
            }



            return related_columns;
        }

        function GenerateReportPreview(tablespriority,generatedrelations) {


            
            var selected = new Array();
            var selectedText = new Array();

            var mappingname="";
            var columns=[];

            $("input[type=checkbox]:checked").each(function () {


                selectedText.push($(this).next().text());

                selected.push(this.value);
            });
            if (selected.length > 0) {

                var ul = document.getElementById("ulSelectedFields");
              


                for (let i = 0; i < selected.length; i++) {

                  

                    //Mapped table names with actual Column name

                    const splitmappedtableandcolumn = selectedText[i].split(":");


                    //Actual table names from sql table

                    const splittableandcolumn = selected[i].split(":");

                    // var mappingname = splitmappedtableandcolumn[0] + ":" + splitmappedtableandcolumn[1];

                     mappingname = splittableandcolumn[0] + "." + splittableandcolumn[1]+ " as [" + splitmappedtableandcolumn[0] + "." + splitmappedtableandcolumn[1] + "], " + mappingname;






                }







              
            }
            else {

                swal({ html: true, title: '<i>ERROR</i>', text: 'Please select some fields from <b>Fields to Use</b> to be displayed on report !' });


                return;
            }


            mappingname = mappingname.replace(/,\s*$/, "");

            $.ajax({
                url: rootUrl + '/Reports/GeneratePreview',
                type: 'POST',
                datatype: 'json',
                data: { tablespriority: tablespriority, generatedrelations: generatedrelations,mappedcolumnsname:mappingname},
                error: function (jqXHR, textStatus, errorThrown) {
                    alert(errorThrown);

                },

                success: function (result) {
                    debugger;

                     columnNames = Object.keys(result[0]);
        for (var i in columnNames) {
            columns.push({
                data: columnNames[i],
                title: columnNames[i]
            });
        }

     
          
        $('#tblPreview').DataTable({
         
              paging: true,
                        scrollX: true,
                      
                        "iDisplayLength": 10,
            data: result,            
            columns: columns,
            responsive: true
        })




                }








            });






        }




        function GetMainParentTable(alltables, arr) {


            for (let i = 0; i < alltables.length; i++) {

                var found = AllRelationships.filter(function (item) { return item.referenced_object === alltables[i].tablename.toString() });


                if (found.length > 0) {

                    for (let col = 0; col < found.length; col++) {
                        var foundinselectedtables = alltables.filter(function (item) { return item.tablename === found[col].table_name.toString() });

                        if (foundinselectedtables.length > 0) {
                            arr.push({
                                _id: GetParentIdFromArray(alltables, foundinselectedtables[0].tablename),
                                parentname: alltables[i].tablename.toString(),
                                tablename: foundinselectedtables[0].tablename,
                                parent: GetParentIdFromArray(alltables, alltables[i].tablename.toString())
                            });
                        }

                        else {


                        }


                    }

                }
                else {

                }




            }
            let result = alltables.filter(o1 => !arr.some(o2 => o1._id === o2._id));




            for (let r in result) {

                arr.push({
                    _id: result[r]._id,
                    parentname: "",
                    tablename: result[r].tablename,
                    parent: -1
                });
            }






        }

        function GetParentIdFromArray(alltables, tablename) {

            var found = alltables.filter(function (item) { return item.tablename === tablename.toString() });

            return found[0]._id;

        }






        function hierarhySort(arr, parent, arr_final, arr_mappedcolumnfinal) {




            var found = arr.filter(function (item) { return item.parent === parent });




            if (found.length > 0) {

                for (let i = 0; i < found.length; i++) {
                    arr_mappedcolumnfinal.push(getMappedName(found[i].tablename));
                    if (parent == -1) {
                        arr_final.push(found[i].tablename);

                    }
                    else {

                        arr_final.push(found[i].parentname + "." + found[i].tablename);
                    }
                    hierarhySort(arr, found[i]._id, arr_final, arr_mappedcolumnfinal);

                }

            }
            else {
                //document.getElementById("fldsetRelationships").style.display = "none";
            }





        }



    </script>
}
